[{"E:\\IT documents\\Web programing\\ReactJS\\react-todo-app\\src\\index.js":"1","E:\\IT documents\\Web programing\\ReactJS\\react-todo-app\\src\\App.js":"2","E:\\IT documents\\Web programing\\ReactJS\\react-todo-app\\src\\reportWebVitals.js":"3","E:\\IT documents\\Web programing\\ReactJS\\react-todo-app\\src\\components\\navBar.js":"4","E:\\IT documents\\Web programing\\ReactJS\\react-todo-app\\src\\components\\body.js":"5","E:\\IT documents\\Web programing\\ReactJS\\React-Todo-App\\src\\index.js":"6","E:\\IT documents\\Web programing\\ReactJS\\React-Todo-App\\src\\reportWebVitals.js":"7","E:\\IT documents\\Web programing\\ReactJS\\React-Todo-App\\src\\App.js":"8","E:\\IT documents\\Web programing\\ReactJS\\React-Todo-App\\src\\components\\body.js":"9","E:\\IT documents\\Web programing\\ReactJS\\React-Todo-App\\src\\components\\navBar.js":"10","E:\\IT documents\\Web programing\\ReactJS\\React-Todo-App\\src\\components\\sideBar.js":"11","E:\\IT documents\\Web programing\\ReactJS\\React-Todo-App\\src\\components\\taskBoard.js":"12","E:\\IT documents\\Web programing\\ReactJS\\React-Todo-App\\src\\components\\weather.js":"13","E:\\IT documents\\Web programing\\ReactJS\\React-Todo-App\\src\\components\\quote.js":"14","E:\\IT documents\\Web programing\\ReactJS\\React-Todo-App\\src\\components\\countDown.js":"15","E:\\IT documents\\Web programing\\ReactJS\\React-Todo-App\\src\\components\\new.js":"16"},{"size":500,"mtime":499162500000,"results":"17","hashOfConfig":"18"},{"size":346,"mtime":1611751765079,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":499162500000,"results":"20","hashOfConfig":"18"},{"size":674,"mtime":1611759393336,"results":"21","hashOfConfig":"18"},{"size":656,"mtime":1611761615057,"results":"22","hashOfConfig":"18"},{"size":500,"mtime":499162500000,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":499162500000,"results":"25","hashOfConfig":"24"},{"size":550,"mtime":1613224151729,"results":"26","hashOfConfig":"24"},{"size":1569,"mtime":1614141601997,"results":"27","hashOfConfig":"24"},{"size":1606,"mtime":1611937709849,"results":"28","hashOfConfig":"24"},{"size":2604,"mtime":1614097889865,"results":"29","hashOfConfig":"24"},{"size":6771,"mtime":1614000752446,"results":"30","hashOfConfig":"24"},{"size":1991,"mtime":1613112539294,"results":"31","hashOfConfig":"24"},{"size":1084,"mtime":1613140435541,"results":"32","hashOfConfig":"24"},{"size":7913,"mtime":1614001614109,"results":"33","hashOfConfig":"24"},{"size":2375,"mtime":1614151478326,"results":"34","hashOfConfig":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"19df08n",{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"jttvl7",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\IT documents\\Web programing\\ReactJS\\react-todo-app\\src\\index.js",[],["77","78"],"E:\\IT documents\\Web programing\\ReactJS\\react-todo-app\\src\\App.js",["79"],"E:\\IT documents\\Web programing\\ReactJS\\react-todo-app\\src\\reportWebVitals.js",[],"E:\\IT documents\\Web programing\\ReactJS\\react-todo-app\\src\\components\\navBar.js",[],"E:\\IT documents\\Web programing\\ReactJS\\react-todo-app\\src\\components\\body.js",["80"],"E:\\IT documents\\Web programing\\ReactJS\\React-Todo-App\\src\\index.js",[],["81","82"],"E:\\IT documents\\Web programing\\ReactJS\\React-Todo-App\\src\\reportWebVitals.js",[],"E:\\IT documents\\Web programing\\ReactJS\\React-Todo-App\\src\\App.js",["83"],"import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"./components/navBar\";\nimport NavBar from \"./components/navBar\";\nimport Body from \"./components/body\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  const [darkMode, setDarkMode] = useState(false);\n  const darkModeChange = () => {\n    setDarkMode(!darkMode);\n  };\n  return (\n    <div className=\"App\">\n      <NavBar onChange={darkModeChange}></NavBar>\n      <Body darkMode={darkMode}></Body>\n    </div>\n  );\n}\n\nexport default App;\n","E:\\IT documents\\Web programing\\ReactJS\\React-Todo-App\\src\\components\\body.js",["84","85","86","87"],"import React, { useState, useEffect } from \"react\";\r\nimport \"../css/body.css\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport SideBar from \"./sideBar\";\r\nimport TaskBoard from \"./taskBoard\";\r\nimport CountDown from \"./countDown\";\r\nimport New from \"./new\";\r\n\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport { SettingsInputAntennaTwoTone } from \"@material-ui/icons\";\r\nfunction Body(props) {\r\n  const [tabRole, setTabRole] = useState(\"taskboard\");\r\n  useEffect(() => {\r\n    if (props.darkMode) {\r\n      document.getElementById(\"body\").style.backgroundColor = \"#202020\";\r\n    } else {\r\n      document.getElementById(\"body\").style.backgroundColor = \"white\";\r\n    }\r\n  });\r\n\r\n  const handleStateChange = index => {\r\n    if (index === 0) {\r\n      setTabRole(\"taskboard\");\r\n    } else if (index === 1) {\r\n      setTabRole(\"news\");\r\n    } else {\r\n      setTabRole(\"countdown\");\r\n    }\r\n  };\r\n  return (\r\n    <div id=\"body\" className=\"main-body\">\r\n      <div className=\"row\">\r\n        <div className=\"col side-bar\">\r\n          <SideBar onChange={handleStateChange} darkMode={props.darkMode}></SideBar>\r\n        </div>\r\n        <div className=\"col-9\">\r\n          {tabRole === \"taskboard\" ? (\r\n            <TaskBoard darkMode={props.darkMode}></TaskBoard>\r\n          ) : tabRole === \"news\" ? (\r\n            <New darkMode={props.darkMode}></New>\r\n          ) : (\r\n            <CountDown darkMode={props.darkMode}></CountDown>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Body;\r\n","E:\\IT documents\\Web programing\\ReactJS\\React-Todo-App\\src\\components\\navBar.js",["88","89"],"import React, { useState } from \"react\";\r\nimport \"../css/navBar.css\";\r\nimport { Navbar } from \"react-bootstrap\";\r\nimport { Nav } from \"react-bootstrap\";\r\nimport PlaylistAddIcon from \"@material-ui/icons/PlaylistAdd\";\r\nimport { FormControlLabel, FormGroup, Switch, withStyles } from \"@material-ui/core\";\r\n\r\nconst AntSwitch = withStyles(theme => ({\r\n  root: {\r\n    width: 28,\r\n    height: 16,\r\n    padding: 0,\r\n    display: \"flex\",\r\n  },\r\n  switchBase: {\r\n    padding: 2,\r\n    color: \"#000000\",\r\n    \"&$checked\": {\r\n      transform: \"translateX(12px)\",\r\n      color: theme.palette.common.white,\r\n      \"& + $track\": {\r\n        opacity: 1,\r\n        backgroundColor: \"#4ee44e\",\r\n        borderColor: theme.palette.primary.main,\r\n      },\r\n    },\r\n  },\r\n  thumb: {\r\n    width: 12,\r\n    height: 12,\r\n    boxShadow: \"none\",\r\n  },\r\n  track: {\r\n    border: `1px solid ${theme.palette.grey[500]}`,\r\n    borderRadius: 16 / 2,\r\n    opacity: 1,\r\n    backgroundColor: theme.palette.common.white,\r\n  },\r\n  checked: {},\r\n}))(Switch);\r\n\r\nfunction NavBar(props) {\r\n  const [darkmode, setDarkMode] = useState(false);\r\n  const handleChange = event => {\r\n    setDarkMode(!darkmode);\r\n    props.onChange(darkmode);\r\n  };\r\n  return (\r\n    <Navbar className=\"main\" bg=\"primary\" variant=\"dark\">\r\n      <Navbar.Brand href=\"/\">\r\n        <PlaylistAddIcon></PlaylistAddIcon>ToDo\r\n      </Navbar.Brand>\r\n      <Nav className=\"justify-content-end main-nav-bar\">\r\n        <p className=\"darkmode-p\">DarkMode</p>\r\n        <AntSwitch onChange={handleChange} name=\"darkmode\" />\r\n      </Nav>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","E:\\IT documents\\Web programing\\ReactJS\\React-Todo-App\\src\\components\\sideBar.js",["90","91"],"import React, { useState } from \"react\";\r\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport TodayIcon from \"@material-ui/icons/Today\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { AlarmOn, CalendarToday, EventNoteTwoTone, Notes } from \"@material-ui/icons\";\r\n\r\nfunction SideBar(props) {\r\n  let itemColor = \"black\";\r\n  let listBgColor = \"#f9f9f9\";\r\n  if (props.darkMode) {\r\n    itemColor = \"#f9f9f9\";\r\n    listBgColor = \"#2a2a2a\";\r\n  } else {\r\n    itemColor = \"black\";\r\n    listBgColor = \"#f9f9f9\";\r\n  }\r\n  const useStyles = makeStyles({\r\n    listItem: {\r\n      color: itemColor,\r\n    },\r\n    mainList: {\r\n      background: listBgColor,\r\n      height: \"100vh\",\r\n    },\r\n  });\r\n  const classes = useStyles();\r\n  const [selectedIndex, setSelectedIndex] = useState(0);\r\n  const handleListItemClick = (event, index) => {\r\n    setSelectedIndex(index);\r\n    props.onChange(index);\r\n  };\r\n  return (\r\n    <div>\r\n      <List\r\n        className={classes.mainList}\r\n        aria-labelledby=\"nested-list-subheader\"\r\n        subheader={\r\n          <ListSubheader className={classes.listItem} component=\"div\" id=\"nested-list-subheader\">\r\n            See more\r\n          </ListSubheader>\r\n        }\r\n      >\r\n        <ListItem\r\n          button\r\n          selected={selectedIndex === 0}\r\n          onClick={event => handleListItemClick(event, 0)}\r\n        >\r\n          <ListItemIcon>\r\n            <TodayIcon className={classes.listItem}></TodayIcon>\r\n          </ListItemIcon>\r\n          <ListItemText className={classes.listItem} color=\"white\" primary=\"Today\" />\r\n        </ListItem>\r\n        <ListItem\r\n          button\r\n          selected={selectedIndex === 1}\r\n          onClick={event => handleListItemClick(event, 1)}\r\n        >\r\n          <ListItemIcon>\r\n            <Notes className={classes.listItem}></Notes>\r\n          </ListItemIcon>\r\n          <ListItemText className={classes.listItem} primary=\"News\" />\r\n        </ListItem>\r\n        <ListItem\r\n          button\r\n          selected={selectedIndex === 2}\r\n          onClick={event => handleListItemClick(event, 2)}\r\n        >\r\n          <ListItemIcon>\r\n            <AlarmOn className={classes.listItem}></AlarmOn>\r\n          </ListItemIcon>\r\n          <ListItemText className={classes.listItem} primary=\"CountDown\" />\r\n        </ListItem>\r\n      </List>\r\n    </div>\r\n  );\r\n}\r\nexport default SideBar;\r\n","E:\\IT documents\\Web programing\\ReactJS\\React-Todo-App\\src\\components\\taskBoard.js",["92","93"],"import { Fab, TextField } from \"@material-ui/core\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport \"../css/taskBoard.css\";\r\nimport { Add } from \"@material-ui/icons\";\r\nimport sunbed from \"../images/sunbed.png\";\r\nimport WeatherCard from \"./weather\";\r\nimport Quote from \"./quote\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nconst storage = JSON.parse(localStorage.getItem(\"tasks\"));\r\nlet items, flag;\r\nif (storage === null) {\r\n  const tasks = { items: [] };\r\n  localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n  items = [];\r\n  flag = 0;\r\n} else {\r\n  items = storage.items;\r\n  if (items.length) {\r\n    flag = 1;\r\n  } else {\r\n    flag = 0;\r\n  }\r\n}\r\nfunction MainTaskBoard(props) {\r\n  const inputColor = props.darkMode ? \"white\" : \"black\";\r\n  const [status, setStatus] = useState(flag);\r\n  const [taskArr, setTaskArr] = useState(items);\r\n  const cardBg = props.darkMode ? \"#2a2a2a\" : \"#f9f9f9\";\r\n  let CustomTextField;\r\n  if (!props.darkMode) {\r\n    CustomTextField = withStyles({\r\n      root: {\r\n        width: \"500px\",\r\n        marginRight: \"20px\",\r\n      },\r\n    })(TextField);\r\n  } else {\r\n    CustomTextField = withStyles({\r\n      root: {\r\n        width: \"500px\",\r\n        marginRight: \"20px\",\r\n        \"& label.Mui-focused\": {\r\n          color: \"white\",\r\n        },\r\n        \"& .MuiInput-underline:after\": {\r\n          borderBottomColor: \"white\",\r\n        },\r\n        \"& .MuiOutlinedInput-root\": {\r\n          color: \"white\",\r\n          \"& fieldset\": {\r\n            borderColor: \"white\",\r\n          },\r\n          \"&:hover fieldset\": {\r\n            borderColor: \"white\",\r\n          },\r\n          \"&.Mui-focused fieldset\": {\r\n            borderColor: \"white\",\r\n          },\r\n        },\r\n      },\r\n    })(TextField);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (taskArr.length === 0) {\r\n      setStatus(0);\r\n    }\r\n    const tasks = {\r\n      items: taskArr,\r\n    };\r\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n    items = JSON.parse(localStorage.getItem(\"tasks\")).items;\r\n  }, [taskArr]);\r\n\r\n  const months = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n  const days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\r\n  const currentDate = new Date();\r\n  const date = currentDate.getDate();\r\n  const day = days[currentDate.getDay() - 1];\r\n  const month = months[currentDate.getMonth()];\r\n  const useStyles = makeStyles({\r\n    input: {\r\n      color: inputColor,\r\n    },\r\n    lable: {\r\n      color: inputColor,\r\n    },\r\n    text: {\r\n      color: inputColor,\r\n    },\r\n    card: {\r\n      backgroundColor: cardBg,\r\n      height: \"100vh\",\r\n    },\r\n  });\r\n  const classes = useStyles();\r\n  const addNewTaskClick = () => {\r\n    const content = document.getElementById(\"task-content\").value;\r\n    if (content !== \"\") {\r\n      setStatus(1);\r\n      setTaskArr(taskArr => [...taskArr, content]);\r\n    }\r\n  };\r\n  let mainContent;\r\n  const childComponentChange = finishedTask => {\r\n    const todoIndex = taskArr.indexOf(finishedTask);\r\n    setTaskArr(taskArr => taskArr.filter((_, index) => index !== todoIndex));\r\n  };\r\n  if (status === 0) {\r\n    mainContent = (\r\n      <div className=\"empty-info\">\r\n        <img className=\"sunbed-image\" src={sunbed}></img>\r\n        <p className={classes.text} id=\"nofitication\">\r\n          No task for today?\r\n        </p>\r\n        <p className={classes.text} id=\"hints \">\r\n          Add somework todo\r\n        </p>\r\n      </div>\r\n    );\r\n  } else {\r\n    mainContent = (\r\n      <ExistTask\r\n        onChange={childComponentChange}\r\n        darkMode={props.darkMode}\r\n        taskArr={taskArr}\r\n      ></ExistTask>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row main-empty-task\">\r\n        <div className=\"row\">\r\n          <div className=\"col-8\">\r\n            <div className=\"time-info\">\r\n              <h4 className={classes.text}>Today</h4>\r\n              <span className={classes.text}>\r\n                {day} {date} {month}\r\n              </span>\r\n            </div>\r\n            <div className=\"add-task\">\r\n              <CustomTextField\r\n                id=\"task-content\"\r\n                variant=\"outlined\"\r\n                label=\"Add New Task\"\r\n                InputProps={{\r\n                  className: classes.input,\r\n                }}\r\n                InputLabelProps={{\r\n                  className: classes.lable,\r\n                }}\r\n              ></CustomTextField>\r\n              <Fab onClick={addNewTaskClick} size=\"small\" color=\"primary\" aria-label=\"add\">\r\n                <Add />\r\n              </Fab>\r\n            </div>\r\n            <div className=\"main-content\">{mainContent}</div>\r\n          </div>\r\n          <div className={`col ${classes.card}`}>\r\n            <WeatherCard darkMode={props.darkMode}></WeatherCard>\r\n            <Quote darkMode={props.darkMode}></Quote>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ExistTask(props) {\r\n  const lableColor = props.darkMode ? \"white\" : \"black\";\r\n  const useStyles = makeStyles({\r\n    text: {\r\n      color: lableColor,\r\n      marginBottom: \"0px\",\r\n    },\r\n  });\r\n  const CustomRadio = withStyles({\r\n    root: {\r\n      color: lableColor,\r\n      \"&$checked\": {\r\n        color: lableColor,\r\n      },\r\n    },\r\n    checked: {},\r\n  })(Radio);\r\n  const classes = useStyles();\r\n  const taskList = props.taskArr.map(task => (\r\n    <div>\r\n      <Tooltip title=\"Mark finished\">\r\n        <FormControlLabel\r\n          value={task}\r\n          control={<CustomRadio></CustomRadio>}\r\n          label={<p className={classes.text}>{task}</p>}\r\n        />\r\n      </Tooltip>\r\n    </div>\r\n  ));\r\n  const handleTaskChange = event => {\r\n    props.onChange(event.target.value);\r\n  };\r\n  return (\r\n    <FormControl component=\"fieldset\">\r\n      <FormLabel component=\"legend\">\r\n        <p className={classes.text}>All tasks</p>\r\n      </FormLabel>\r\n      <RadioGroup onChange={handleTaskChange} aria-label=\"tasks\" name=\"customized-radios\">\r\n        {taskList}\r\n      </RadioGroup>\r\n    </FormControl>\r\n  );\r\n}\r\nfunction TaskBoard(props) {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <MainTaskBoard darkMode={props.darkMode}></MainTaskBoard>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskBoard;\r\n","E:\\IT documents\\Web programing\\ReactJS\\React-Todo-App\\src\\components\\weather.js",["94","95"],"import React, { useEffect, useState } from \"react\";\r\nimport \"../css/taskBoard.css\";\r\nimport cloudyImage from \"../images/cloudy.png\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nfunction WeatherCard(props) {\r\n  const [status, setStatus] = useState(null);\r\n  const [temperature, setTemperature] = useState(null);\r\n  const [location, setLocation] = useState(null);\r\n  const [decription, setDecription] = useState(null);\r\n  const updateWeatherInfo = data => {\r\n    setStatus(data.weather[0].main);\r\n    setDecription(data.weather[0].description);\r\n    setLocation(data.name + \",\" + data.sys.country);\r\n    setTemperature(`${Math.round(parseFloat(data.main.temp) - 273.15)} °C `);\r\n  };\r\n  const textColor = props.darkMode ? \"white\" : \"black\";\r\n\r\n  const useStyle = makeStyles({\r\n    text: {\r\n      color: textColor,\r\n    },\r\n  });\r\n  const classes = useStyle();\r\n  useEffect(() => {\r\n    let longitude, latitude;\r\n    navigator.geolocation.getCurrentPosition(res => {\r\n      longitude = res.coords.longitude;\r\n      latitude = res.coords.latitude;\r\n      fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=a17391360b374134d5b0e6b62e80f2f6`\r\n      )\r\n        .then(res => res.json())\r\n        .then(data => {\r\n          updateWeatherInfo(data);\r\n        });\r\n    });\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <div className=\"header\">\r\n        <h4 className={classes.text}>Weather</h4>\r\n      </div>\r\n      <div className=\"status\">\r\n        <div className=\"contain\">\r\n          <p className={classes.text} id=\"location\">\r\n            {location}\r\n          </p>\r\n          <p className={classes.text} id=\" temperature\">\r\n            {temperature}\r\n          </p>\r\n          <p className={classes.text}>Decription: {decription}</p>\r\n        </div>\r\n        <div className=\"contain\">\r\n          <img src={cloudyImage} className=\"weather-img\"></img>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherCard;\r\n","E:\\IT documents\\Web programing\\ReactJS\\React-Todo-App\\src\\components\\quote.js",["96"],"import React, { useEffect, useState } from \"react\";\r\nimport \"../css/taskBoard.css\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nfunction Quote(props) {\r\n  const renderQuote = content => {};\r\n  const [quote, setquote] = useState(null);\r\n  const [author, setauthor] = useState(null);\r\n  const textColor = props.darkMode ? \"white\" : \"black\";\r\n  useEffect(() => {\r\n    fetch(\"https://quotes.rest/qod?language=en\")\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        setquote(data.contents.quotes[0].quote);\r\n        setauthor(data.contents.quotes[0].author);\r\n      });\r\n  }, []);\r\n  const useStyles = makeStyles({\r\n    text: {\r\n      color: textColor,\r\n    },\r\n  });\r\n  const classes = useStyles();\r\n  return (\r\n    <div>\r\n      <div className=\"header\">\r\n        <h4 className={classes.text}>Today quote</h4>\r\n      </div>\r\n      <p className={`quote-content ${classes.text}`}>\"{quote}\"</p>\r\n      <div className=\"author-div\">\r\n        <p className={`author-name ${classes.text}`}>--{author}-- </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Quote;\r\n","E:\\IT documents\\Web programing\\ReactJS\\React-Todo-App\\src\\components\\countDown.js",["97","98","99","100","101","102","103"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardTimePicker,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport \"date-fns\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport \"../css/countdown.css\";\r\nimport { Card, CardActions, CardContent, Tooltip } from \"@material-ui/core\";\r\nimport { Context } from \"react-responsive\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport confetti from \"../images/confetti.png\";\r\nlet events = JSON.parse(localStorage.getItem(\"events\"));\r\nlet flag;\r\nif (events === null) {\r\n  const temp = [];\r\n  localStorage.setItem(\"events\", JSON.stringify(temp));\r\n  events = [];\r\n  flag = 0;\r\n} else {\r\n  if (events.length) {\r\n    flag = 1;\r\n  } else {\r\n    flag = 0;\r\n  }\r\n}\r\nfunction Events(props) {\r\n  let content;\r\n  const color = props.darkMode ? \"#2a2a2a\" : \"#f9f9f9\";\r\n  const textColor = props.darkMode ? \"white\" : \"black\";\r\n  const useStyles = makeStyles({\r\n    card: {\r\n      margin: \"10px 10px 10px 0px\",\r\n      padding: \"20px\",\r\n      backgroundColor: color,\r\n    },\r\n    text: {\r\n      color: textColor,\r\n    },\r\n  });\r\n  const classes = useStyles();\r\n  const startCountDown = () => {\r\n    try {\r\n      for (const event of props.allEvents) {\r\n        let now = new Date();\r\n        let eventDate = new Date(event.endDay);\r\n        let currentTime = now.getTime();\r\n        let eventTime = eventDate.getTime();\r\n        let remainTime = eventTime - currentTime;\r\n        let s = Math.floor(remainTime / 1000);\r\n        let m = Math.floor(s / 60);\r\n        let h = Math.floor(m / 60);\r\n        let d = Math.floor(h / 24);\r\n        h %= 24;\r\n        m %= 60;\r\n        s %= 60;\r\n        h = h < 10 ? \"0\" + h : h;\r\n        m = m < 10 ? \"0\" + m : m;\r\n        s = s < 10 ? \"0\" + s : s;\r\n        document.getElementById(`${event.name}-day`).innerText = `${d} days`;\r\n        document.getElementById(`${event.name}-hour`).innerText = `${h} hours`;\r\n        document.getElementById(`${event.name}-min`).innerText = `${m} mins`;\r\n        document.getElementById(`${event.name}-sec`).innerText = `${s} seconds`;\r\n      }\r\n    } catch {}\r\n  };\r\n  useEffect(() => {\r\n    setInterval(startCountDown, 1000);\r\n  });\r\n  const deleteEvent = (e, name) => {\r\n    console.log(name);\r\n    props.deleteEvent(name);\r\n  };\r\n  if (props.allEvents.length) {\r\n    content = props.allEvents.map(event => (\r\n      <Card className={classes.card}>\r\n        <div>\r\n          <div className=\"event-block\">\r\n            <p className={`event-title ${classes.text}`}>{event.name}</p>\r\n            <Tooltip title=\"Delete event\">\r\n              <DeleteIcon\r\n                className={classes.text}\r\n                id={event.name}\r\n                onClick={e => deleteEvent(e, event.name)}\r\n              ></DeleteIcon>\r\n            </Tooltip>\r\n          </div>\r\n          <span className={`event-time ${classes.text}`} id={`${event.name}-day`}></span>\r\n          <span className={classes.text}>:</span>\r\n          <span className={`event-time ${classes.text}`} id={`${event.name}-hour`}></span>\r\n          <span className={classes.text}>:</span>\r\n          <span className={`event-time ${classes.text}`} id={`${event.name}-min`}></span>\r\n          <span className={classes.text}>:</span>\r\n          <span className={`event-time ${classes.text}`} id={`${event.name}-sec`}></span>\r\n        </div>\r\n      </Card>\r\n    ));\r\n  } else {\r\n    content = (\r\n      <div className=\"empty-event-main\">\r\n        <img className=\"empty-event-img\" src={confetti}></img>\r\n        <p className={classes.text} id=\"nofitication\">\r\n          Seem like there are no event ?\r\n        </p>\r\n        <p className={classes.text} id=\"hints \">\r\n          Add some event\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n  return <div>{content}</div>;\r\n}\r\nfunction CountDown(props) {\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n  const [allEvents, setAllEvents] = useState(events);\r\n  const inputColor = props.darkMode ? \"white\" : \"black\";\r\n  const handleDateChange = date => {\r\n    setSelectedDate(date);\r\n  };\r\n  useEffect(() => {\r\n    console.log(\"set event in effect 1\");\r\n    localStorage.setItem(\"events\", JSON.stringify(allEvents));\r\n    events = JSON.parse(localStorage.getItem(\"events\"));\r\n  }, [allEvents]);\r\n  let CustomTextField;\r\n  if (!props.darkMode) {\r\n    CustomTextField = withStyles({\r\n      root: {\r\n        width: \"500px\",\r\n        marginRight: \"20px\",\r\n      },\r\n    })(TextField);\r\n  } else {\r\n    CustomTextField = withStyles({\r\n      root: {\r\n        width: \"500px\",\r\n        marginRight: \"20px\",\r\n        \"& label.Mui-focused\": {\r\n          color: \"white\",\r\n        },\r\n        \"& .MuiInput-underline:after\": {\r\n          borderBottomColor: \"white\",\r\n        },\r\n        \"& .MuiOutlinedInput-root\": {\r\n          color: \"white\",\r\n          \"& fieldset\": {\r\n            borderColor: \"white\",\r\n          },\r\n          \"&:hover fieldset\": {\r\n            borderColor: \"white\",\r\n          },\r\n          \"&.Mui-focused fieldset\": {\r\n            borderColor: \"white\",\r\n          },\r\n        },\r\n      },\r\n    })(TextField);\r\n  }\r\n  const useStyles = makeStyles({\r\n    input: {\r\n      color: inputColor,\r\n    },\r\n    lable: {\r\n      color: inputColor,\r\n    },\r\n    text: {\r\n      color: inputColor,\r\n    },\r\n    button: {\r\n      width: \"200px\",\r\n      marginTop: \"40px\",\r\n    },\r\n    picker: {\r\n      width: \"200px\",\r\n      marginBottom: \"40px\",\r\n    },\r\n    card: {\r\n      margin: \"20px 20px 20px 0px\",\r\n    },\r\n  });\r\n  const classes = useStyles();\r\n  const addEvents = () => {\r\n    const eventName = document.getElementById(\"event-name\").value;\r\n    const items = {\r\n      name: eventName,\r\n      endDay: selectedDate,\r\n    };\r\n    setAllEvents(allEvents => [...allEvents, items]);\r\n  };\r\n  const deleteEvent = name => {\r\n    setAllEvents(\r\n      allEvents.filter(function (el) {\r\n        return el.name != name;\r\n      })\r\n    );\r\n  };\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col\">\r\n        <div className=\"main-countdown\">\r\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n            <h4 className={classes.text}>Add Event</h4>\r\n            <KeyboardDatePicker\r\n              className={classes.picker}\r\n              disableToolbar\r\n              variant=\"inline\"\r\n              margin=\"normal\"\r\n              id=\"date-picker-inline\"\r\n              format=\"dd/MM/yyyy\"\r\n              value={selectedDate}\r\n              onChange={handleDateChange}\r\n              label=\"Choose end day\"\r\n              InputLabelProps={{\r\n                className: classes.text,\r\n              }}\r\n              InputProps={{\r\n                className: classes.input,\r\n              }}\r\n              KeyboardButtonProps={{\r\n                \"aria-label\": \"change date\",\r\n              }}\r\n            />\r\n          </MuiPickersUtilsProvider>\r\n          <CustomTextField\r\n            id=\"event-name\"\r\n            variant=\"outlined\"\r\n            label=\"Event name\"\r\n            InputProps={{\r\n              className: classes.input,\r\n            }}\r\n            InputLabelProps={{\r\n              className: classes.lable,\r\n            }}\r\n          ></CustomTextField>\r\n          <Button\r\n            className={classes.button}\r\n            onClick={addEvents}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n          >\r\n            START COUNT DOWN\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      <div className=\"col\">\r\n        <h4 className={classes.text}>All Events</h4>\r\n        <div>\r\n          <Events\r\n            darkMode={props.darkMode}\r\n            deleteEvent={deleteEvent}\r\n            allEvents={allEvents}\r\n          ></Events>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default CountDown;\r\n","E:\\IT documents\\Web programing\\ReactJS\\React-Todo-App\\src\\components\\new.js",["104","105","106","107","108","109","110","111"],{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","severity":1,"message":"117","line":1,"column":8,"nodeType":"118","messageId":"119","endLine":1,"endColumn":12},{"ruleId":"116","severity":1,"message":"120","line":3,"column":8,"nodeType":"118","messageId":"119","endLine":3,"endColumn":11},{"ruleId":"112","replacedBy":"121"},{"ruleId":"114","replacedBy":"122"},{"ruleId":"116","severity":1,"message":"117","line":2,"column":8,"nodeType":"118","messageId":"119","endLine":2,"endColumn":12},{"ruleId":"116","severity":1,"message":"123","line":3,"column":8,"nodeType":"118","messageId":"119","endLine":3,"endColumn":17},{"ruleId":"116","severity":1,"message":"124","line":4,"column":8,"nodeType":"118","messageId":"119","endLine":4,"endColumn":11},{"ruleId":"116","severity":1,"message":"125","line":10,"column":10,"nodeType":"118","messageId":"119","endLine":10,"endColumn":23},{"ruleId":"116","severity":1,"message":"126","line":11,"column":10,"nodeType":"118","messageId":"119","endLine":11,"endColumn":37},{"ruleId":"116","severity":1,"message":"127","line":6,"column":10,"nodeType":"118","messageId":"119","endLine":6,"endColumn":26},{"ruleId":"116","severity":1,"message":"128","line":6,"column":28,"nodeType":"118","messageId":"119","endLine":6,"endColumn":37},{"ruleId":"116","severity":1,"message":"129","line":9,"column":19,"nodeType":"118","messageId":"119","endLine":9,"endColumn":32},{"ruleId":"116","severity":1,"message":"130","line":9,"column":34,"nodeType":"118","messageId":"119","endLine":9,"endColumn":50},{"ruleId":"116","severity":1,"message":"131","line":4,"column":8,"nodeType":"118","messageId":"119","endLine":4,"endColumn":12},{"ruleId":"132","severity":1,"message":"133","line":132,"column":9,"nodeType":"134","endLine":132,"endColumn":52},{"ruleId":"116","severity":1,"message":"135","line":7,"column":10,"nodeType":"118","messageId":"119","endLine":7,"endColumn":16},{"ruleId":"132","severity":1,"message":"133","line":55,"column":11,"nodeType":"134","endLine":55,"endColumn":58},{"ruleId":"116","severity":1,"message":"136","line":6,"column":9,"nodeType":"118","messageId":"119","endLine":6,"endColumn":20},{"ruleId":"116","severity":1,"message":"137","line":4,"column":3,"nodeType":"118","messageId":"119","endLine":4,"endColumn":21},{"ruleId":"116","severity":1,"message":"138","line":13,"column":16,"nodeType":"118","messageId":"119","endLine":13,"endColumn":27},{"ruleId":"116","severity":1,"message":"139","line":13,"column":29,"nodeType":"118","messageId":"119","endLine":13,"endColumn":40},{"ruleId":"116","severity":1,"message":"140","line":14,"column":10,"nodeType":"118","messageId":"119","endLine":14,"endColumn":17},{"ruleId":"116","severity":1,"message":"141","line":28,"column":5,"nodeType":"118","messageId":"119","endLine":28,"endColumn":9},{"ruleId":"132","severity":1,"message":"133","line":105,"column":9,"nodeType":"134","endLine":105,"endColumn":57},{"ruleId":"142","severity":1,"message":"143","line":197,"column":24,"nodeType":"144","messageId":"145","endLine":197,"endColumn":26},{"ruleId":"116","severity":1,"message":"146","line":2,"column":8,"nodeType":"118","messageId":"119","endLine":2,"endColumn":16},{"ruleId":"116","severity":1,"message":"147","line":5,"column":10,"nodeType":"118","messageId":"119","endLine":5,"endColumn":20},{"ruleId":"116","severity":1,"message":"148","line":7,"column":8,"nodeType":"118","messageId":"119","endLine":7,"endColumn":13},{"ruleId":"132","severity":1,"message":"133","line":20,"column":9,"nodeType":"134","endLine":20,"endColumn":59},{"ruleId":"149","severity":1,"message":"150","line":22,"column":11,"nodeType":"134","endLine":22,"endColumn":89},{"ruleId":"151","severity":1,"message":"152","line":51,"column":13,"nodeType":"153","endLine":64,"endColumn":4},{"ruleId":"116","severity":1,"message":"154","line":55,"column":13,"nodeType":"118","messageId":"119","endLine":55,"endColumn":17},{"ruleId":"151","severity":1,"message":"155","line":64,"column":6,"nodeType":"156","endLine":64,"endColumn":8,"suggestions":"157"},"no-native-reassign",["158"],"no-negated-in-lhs",["159"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Fab' is defined but never used.",["158"],["159"],"'TextField' is defined but never used.","'Box' is defined but never used.","'useMediaQuery' is defined but never used.","'SettingsInputAntennaTwoTone' is defined but never used.","'FormControlLabel' is defined but never used.","'FormGroup' is defined but never used.","'CalendarToday' is defined but never used.","'EventNoteTwoTone' is defined but never used.","'clsx' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'status' is assigned a value but never used.","'renderQuote' is assigned a value but never used.","'KeyboardTimePicker' is defined but never used.","'CardActions' is defined but never used.","'CardContent' is defined but never used.","'Context' is defined but never used.","'flag' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Backdrop' is defined but never used.","'Typography' is defined but never used.","'axios' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'date' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'newArr.length'. Either include it or remove the dependency array.","ArrayExpression",["160"],"no-global-assign","no-unsafe-negation",{"desc":"161","fix":"162"},"Update the dependencies array to be: [newArr.length]",{"range":"163","text":"164"},[1995,1997],"[newArr.length]"]