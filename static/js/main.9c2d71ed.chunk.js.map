{"version":3,"sources":["logo.svg","components/navBar.js","components/sideBar.js","images/sunbed.png","images/cloudy.png","components/weather.js","components/quote.js","components/taskBoard.js","components/countDown.js","components/body.js","App.js","reportWebVitals.js","index.js"],"names":["AntSwitch","withStyles","theme","root","width","height","padding","display","switchBase","color","transform","palette","common","white","opacity","backgroundColor","borderColor","primary","main","thumb","boxShadow","track","border","grey","borderRadius","checked","Switch","NavBar","props","useState","darkmode","setDarkMode","Navbar","className","bg","variant","Brand","href","Nav","onChange","event","name","SideBar","itemColor","listBgColor","darkMode","classes","makeStyles","listItem","mainList","background","useStyles","selectedIndex","setSelectedIndex","handleListItemClick","index","List","aria-labelledby","subheader","ListSubheader","component","id","ListItem","button","selected","onClick","ListItemIcon","ListItemText","EventNoteTwoTone","AlarmOn","WeatherCard","setStatus","temperature","setTemperature","location","setLocation","decription","setDecription","textColor","text","useStyle","useEffect","longitude","latitude","navigator","geolocation","getCurrentPosition","res","coords","fetch","then","json","data","weather","description","sys","country","Math","round","parseFloat","temp","updateWeatherInfo","src","cloudyImage","Quote","items","flag","quote","setquote","author","setauthor","contents","quotes","storage","JSON","parse","localStorage","getItem","setItem","stringify","length","MainTaskBoard","CustomTextField","inputColor","status","taskArr","setTaskArr","cardBg","marginRight","borderBottomColor","TextField","tasks","mainContent","currentDate","Date","date","getDate","day","getDay","month","getMonth","input","lable","card","sunbed","ExistTask","finishedTask","todoIndex","indexOf","filter","_","label","InputProps","InputLabelProps","Fab","content","document","getElementById","value","size","aria-label","Add","lableColor","marginBottom","CustomRadio","Radio","taskList","map","task","Tooltip","title","FormControlLabel","control","FormControl","FormLabel","RadioGroup","target","TaskBoard","CountDown","selectedDate","setSelectedDate","marginTop","picker","margin","utils","DateFnsUtils","disableToolbar","format","KeyboardButtonProps","Button","startCountDown","currentTime","getTime","remainTime","s","floor","m","h","d","innerText","setInterval","Card","CardContent","Body","tabRole","setTabRole","style","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9c2d71ed.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from \"react\";\r\nimport \"../css/navBar.css\";\r\nimport { Navbar } from \"react-bootstrap\";\r\nimport { Nav } from \"react-bootstrap\";\r\nimport PlaylistAddIcon from \"@material-ui/icons/PlaylistAdd\";\r\nimport { FormControlLabel, FormGroup, Switch, withStyles } from \"@material-ui/core\";\r\n\r\nconst AntSwitch = withStyles(theme => ({\r\n  root: {\r\n    width: 28,\r\n    height: 16,\r\n    padding: 0,\r\n    display: \"flex\",\r\n  },\r\n  switchBase: {\r\n    padding: 2,\r\n    color: \"#000000\",\r\n    \"&$checked\": {\r\n      transform: \"translateX(12px)\",\r\n      color: theme.palette.common.white,\r\n      \"& + $track\": {\r\n        opacity: 1,\r\n        backgroundColor: \"#4ee44e\",\r\n        borderColor: theme.palette.primary.main,\r\n      },\r\n    },\r\n  },\r\n  thumb: {\r\n    width: 12,\r\n    height: 12,\r\n    boxShadow: \"none\",\r\n  },\r\n  track: {\r\n    border: `1px solid ${theme.palette.grey[500]}`,\r\n    borderRadius: 16 / 2,\r\n    opacity: 1,\r\n    backgroundColor: theme.palette.common.white,\r\n  },\r\n  checked: {},\r\n}))(Switch);\r\n\r\nfunction NavBar(props) {\r\n  const [darkmode, setDarkMode] = useState(false);\r\n  const handleChange = event => {\r\n    setDarkMode(!darkmode);\r\n    props.onChange(darkmode);\r\n  };\r\n  return (\r\n    <Navbar className=\"main\" bg=\"primary\" variant=\"dark\">\r\n      <Navbar.Brand href=\"/\">\r\n        <PlaylistAddIcon></PlaylistAddIcon>ToDo\r\n      </Navbar.Brand>\r\n      <Nav className=\"justify-content-end main-nav-bar\">\r\n        <p className=\"darkmode-p\">DarkMode</p>\r\n        <AntSwitch onChange={handleChange} name=\"darkmode\" />\r\n      </Nav>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { useState } from \"react\";\r\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport TodayIcon from \"@material-ui/icons/Today\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { AlarmOn, CalendarToday, EventNoteTwoTone } from \"@material-ui/icons\";\r\n\r\nfunction SideBar(props) {\r\n  let itemColor = \"black\";\r\n  let listBgColor = \"#f9f9f9\";\r\n  if (props.darkMode) {\r\n    itemColor = \"#f9f9f9\";\r\n    listBgColor = \"#2a2a2a\";\r\n  } else {\r\n    itemColor = \"black\";\r\n    listBgColor = \"#f9f9f9\";\r\n  }\r\n  const useStyles = makeStyles({\r\n    listItem: {\r\n      color: itemColor,\r\n    },\r\n    mainList: {\r\n      background: listBgColor,\r\n      height: \"100vh\",\r\n    },\r\n  });\r\n  const classes = useStyles();\r\n  const [selectedIndex, setSelectedIndex] = useState(0);\r\n  const handleListItemClick = (event, index) => {\r\n    setSelectedIndex(index);\r\n    props.onChange(index);\r\n  };\r\n  return (\r\n    <div>\r\n      <List\r\n        className={classes.mainList}\r\n        aria-labelledby=\"nested-list-subheader\"\r\n        subheader={\r\n          <ListSubheader className={classes.listItem} component=\"div\" id=\"nested-list-subheader\">\r\n            See more\r\n          </ListSubheader>\r\n        }\r\n      >\r\n        <ListItem\r\n          button\r\n          selected={selectedIndex === 0}\r\n          onClick={event => handleListItemClick(event, 0)}\r\n        >\r\n          <ListItemIcon>\r\n            <TodayIcon className={classes.listItem}></TodayIcon>\r\n          </ListItemIcon>\r\n          <ListItemText className={classes.listItem} color=\"white\" primary=\"Today\" />\r\n        </ListItem>\r\n        <ListItem\r\n          button\r\n          selected={selectedIndex === 1}\r\n          onClick={event => handleListItemClick(event, 1)}\r\n        >\r\n          <ListItemIcon>\r\n            <EventNoteTwoTone className={classes.listItem}></EventNoteTwoTone>\r\n          </ListItemIcon>\r\n          <ListItemText className={classes.listItem} primary=\"Upcomming\" />\r\n        </ListItem>\r\n        <ListItem\r\n          button\r\n          selected={selectedIndex === 2}\r\n          onClick={event => handleListItemClick(event, 2)}\r\n        >\r\n          <ListItemIcon>\r\n            <AlarmOn className={classes.listItem}></AlarmOn>\r\n          </ListItemIcon>\r\n          <ListItemText className={classes.listItem} primary=\"CountDown\" />\r\n        </ListItem>\r\n      </List>\r\n    </div>\r\n  );\r\n}\r\nexport default SideBar;\r\n","export default __webpack_public_path__ + \"static/media/sunbed.a964e424.png\";","export default __webpack_public_path__ + \"static/media/cloudy.a6efbb41.png\";","import React, { useEffect, useState } from \"react\";\r\nimport \"../css/taskBoard.css\";\r\nimport cloudyImage from \"../images/cloudy.png\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nfunction WeatherCard(props) {\r\n  const [status, setStatus] = useState(null);\r\n  const [temperature, setTemperature] = useState(null);\r\n  const [location, setLocation] = useState(null);\r\n  const [decription, setDecription] = useState(null);\r\n  const updateWeatherInfo = data => {\r\n    setStatus(data.weather[0].main);\r\n    setDecription(data.weather[0].description);\r\n    setLocation(data.name + \",\" + data.sys.country);\r\n    setTemperature(`${Math.round(parseFloat(data.main.temp) - 273.15)} °C `);\r\n  };\r\n  const textColor = props.darkMode ? \"white\" : \"black\";\r\n\r\n  const useStyle = makeStyles({\r\n    text: {\r\n      color: textColor,\r\n    },\r\n  });\r\n  const classes = useStyle();\r\n  useEffect(() => {\r\n    let longitude, latitude;\r\n    navigator.geolocation.getCurrentPosition(res => {\r\n      longitude = res.coords.longitude;\r\n      latitude = res.coords.latitude;\r\n      fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=a17391360b374134d5b0e6b62e80f2f6`\r\n      )\r\n        .then(res => res.json())\r\n        .then(data => {\r\n          updateWeatherInfo(data);\r\n        });\r\n    });\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <div className=\"header\">\r\n        <h4 className={classes.text}>Weather</h4>\r\n      </div>\r\n      <div className=\"status\">\r\n        <div className=\"contain\">\r\n          <p className={classes.text} id=\"location\">\r\n            {location}\r\n          </p>\r\n          <p className={classes.text} id=\" temperature\">\r\n            {temperature}\r\n          </p>\r\n          <p className={classes.text}>Decription: {decription}</p>\r\n        </div>\r\n        <div className=\"contain\">\r\n          <img src={cloudyImage} className=\"weather-img\"></img>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherCard;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"../css/taskBoard.css\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nfunction Quote(props) {\r\n  const renderQuote = content => {};\r\n  const [quote, setquote] = useState(null);\r\n  const [author, setauthor] = useState(null);\r\n  const textColor = props.darkMode ? \"white\" : \"black\";\r\n  useEffect(() => {\r\n    fetch(\"https://quotes.rest/qod?language=en\")\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        setquote(data.contents.quotes[0].quote);\r\n        setauthor(data.contents.quotes[0].author);\r\n      });\r\n  }, []);\r\n  const useStyles = makeStyles({\r\n    text: {\r\n      color: textColor,\r\n    },\r\n  });\r\n  const classes = useStyles();\r\n  return (\r\n    <div>\r\n      <div className=\"header\">\r\n        <h4 className={classes.text}>Today quote</h4>\r\n      </div>\r\n      <p className={`quote-content ${classes.text}`}>\"{quote}\"</p>\r\n      <div className=\"author-div\">\r\n        <p className={`author-name ${classes.text}`}>--{author}-- </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Quote;\r\n","import { Fab, TextField } from \"@material-ui/core\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport \"../css/taskBoard.css\";\r\nimport { Add } from \"@material-ui/icons\";\r\nimport sunbed from \"../images/sunbed.png\";\r\nimport WeatherCard from \"./weather\";\r\nimport Quote from \"./quote\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nconst storage = JSON.parse(localStorage.getItem(\"tasks\"));\r\nlet items, flag;\r\nif (storage === null) {\r\n  const tasks = { items: [] };\r\n  localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n  items = [];\r\n  flag = 0;\r\n} else {\r\n  items = storage.items;\r\n  if (items.length) {\r\n    flag = 1;\r\n  } else {\r\n    flag = 0;\r\n  }\r\n}\r\nfunction MainTaskBoard(props) {\r\n  const inputColor = props.darkMode ? \"white\" : \"black\";\r\n  const [status, setStatus] = useState(flag);\r\n  const [taskArr, setTaskArr] = useState(items);\r\n  const cardBg = props.darkMode ? \"#2a2a2a\" : \"#f9f9f9\";\r\n  let CustomTextField;\r\n  if (!props.darkMode) {\r\n    CustomTextField = withStyles({\r\n      root: {\r\n        width: \"500px\",\r\n        marginRight: \"20px\",\r\n      },\r\n    })(TextField);\r\n  } else {\r\n    CustomTextField = withStyles({\r\n      root: {\r\n        width: \"500px\",\r\n        marginRight: \"20px\",\r\n        \"& label.Mui-focused\": {\r\n          color: \"white\",\r\n        },\r\n        \"& .MuiInput-underline:after\": {\r\n          borderBottomColor: \"white\",\r\n        },\r\n        \"& .MuiOutlinedInput-root\": {\r\n          color: \"white\",\r\n          \"& fieldset\": {\r\n            borderColor: \"white\",\r\n          },\r\n          \"&:hover fieldset\": {\r\n            borderColor: \"white\",\r\n          },\r\n          \"&.Mui-focused fieldset\": {\r\n            borderColor: \"white\",\r\n          },\r\n        },\r\n      },\r\n    })(TextField);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (taskArr.length === 0) {\r\n      setStatus(0);\r\n    }\r\n    const tasks = {\r\n      items: taskArr,\r\n    };\r\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n  }, [taskArr]);\r\n\r\n  const months = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n  const days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\r\n  const currentDate = new Date();\r\n  const date = currentDate.getDate();\r\n  const day = days[currentDate.getDay() - 1];\r\n  const month = months[currentDate.getMonth()];\r\n  const useStyles = makeStyles({\r\n    input: {\r\n      color: inputColor,\r\n    },\r\n    lable: {\r\n      color: inputColor,\r\n    },\r\n    text: {\r\n      color: inputColor,\r\n    },\r\n    card: {\r\n      backgroundColor: cardBg,\r\n      height: \"100vh\",\r\n    },\r\n  });\r\n  const classes = useStyles();\r\n  const addNewTaskClick = () => {\r\n    const content = document.getElementById(\"task-content\").value;\r\n    if (content !== \"\") {\r\n      setStatus(1);\r\n      setTaskArr(taskArr => [...taskArr, content]);\r\n    }\r\n  };\r\n  let mainContent;\r\n  const childComponentChange = finishedTask => {\r\n    const todoIndex = taskArr.indexOf(finishedTask);\r\n    setTaskArr(taskArr => taskArr.filter((_, index) => index !== todoIndex));\r\n  };\r\n  if (status === 0) {\r\n    mainContent = (\r\n      <div className=\"empty-info\">\r\n        <img className=\"sunbed-image\" src={sunbed}></img>\r\n        <p className={classes.text} id=\"nofitication\">\r\n          No task for today?\r\n        </p>\r\n        <p className={classes.text} id=\"hints \">\r\n          Add somework todo\r\n        </p>\r\n      </div>\r\n    );\r\n  } else {\r\n    mainContent = (\r\n      <ExistTask\r\n        onChange={childComponentChange}\r\n        darkMode={props.darkMode}\r\n        taskArr={taskArr}\r\n      ></ExistTask>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row main-empty-task\">\r\n        <div className=\"row\">\r\n          <div className=\"col-8\">\r\n            <div className=\"time-info\">\r\n              <h4 className={classes.text}>Today</h4>\r\n              <span className={classes.text}>\r\n                {day} {date} {month}\r\n              </span>\r\n            </div>\r\n            <div className=\"add-task\">\r\n              <CustomTextField\r\n                id=\"task-content\"\r\n                variant=\"outlined\"\r\n                label=\"Add New Task\"\r\n                InputProps={{\r\n                  className: classes.input,\r\n                }}\r\n                InputLabelProps={{\r\n                  className: classes.lable,\r\n                }}\r\n              ></CustomTextField>\r\n              <Fab onClick={addNewTaskClick} size=\"small\" color=\"primary\" aria-label=\"add\">\r\n                <Add />\r\n              </Fab>\r\n            </div>\r\n            <div className=\"main-content\">{mainContent}</div>\r\n          </div>\r\n          <div className={`col ${classes.card}`}>\r\n            <WeatherCard darkMode={props.darkMode}></WeatherCard>\r\n            <Quote darkMode={props.darkMode}></Quote>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ExistTask(props) {\r\n  const lableColor = props.darkMode ? \"white\" : \"black\";\r\n  const useStyles = makeStyles({\r\n    text: {\r\n      color: lableColor,\r\n      marginBottom: \"0px\",\r\n    },\r\n  });\r\n  const CustomRadio = withStyles({\r\n    root: {\r\n      color: lableColor,\r\n      \"&$checked\": {\r\n        color: lableColor,\r\n      },\r\n    },\r\n    checked: {},\r\n  })(Radio);\r\n  const classes = useStyles();\r\n  const taskList = props.taskArr.map(task => (\r\n    <div>\r\n      <Tooltip title=\"Mark finished\">\r\n        <FormControlLabel\r\n          value={task}\r\n          control={<CustomRadio></CustomRadio>}\r\n          label={<p className={classes.text}>{task}</p>}\r\n        />\r\n      </Tooltip>\r\n    </div>\r\n  ));\r\n  const handleTaskChange = event => {\r\n    props.onChange(event.target.value);\r\n  };\r\n  return (\r\n    <FormControl component=\"fieldset\">\r\n      <FormLabel component=\"legend\">\r\n        <p className={classes.text}>All tasks</p>\r\n      </FormLabel>\r\n      <RadioGroup onChange={handleTaskChange} aria-label=\"tasks\" name=\"customized-radios\">\r\n        {taskList}\r\n      </RadioGroup>\r\n    </FormControl>\r\n  );\r\n}\r\nfunction TaskBoard(props) {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <MainTaskBoard darkMode={props.darkMode}></MainTaskBoard>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskBoard;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardTimePicker,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport \"date-fns\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport \"../css/countdown.css\";\r\nimport { Card, CardActions, CardContent } from \"@material-ui/core\";\r\n\r\nfunction CountDown(props) {\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n  const inputColor = props.darkMode ? \"white\" : \"black\";\r\n  const handleDateChange = date => {\r\n    setSelectedDate(date);\r\n  };\r\n  let CustomTextField;\r\n  if (!props.darkMode) {\r\n    CustomTextField = withStyles({\r\n      root: {\r\n        width: \"500px\",\r\n        marginRight: \"20px\",\r\n      },\r\n    })(TextField);\r\n  } else {\r\n    CustomTextField = withStyles({\r\n      root: {\r\n        width: \"500px\",\r\n        marginRight: \"20px\",\r\n        \"& label.Mui-focused\": {\r\n          color: \"white\",\r\n        },\r\n        \"& .MuiInput-underline:after\": {\r\n          borderBottomColor: \"white\",\r\n        },\r\n        \"& .MuiOutlinedInput-root\": {\r\n          color: \"white\",\r\n          \"& fieldset\": {\r\n            borderColor: \"white\",\r\n          },\r\n          \"&:hover fieldset\": {\r\n            borderColor: \"white\",\r\n          },\r\n          \"&.Mui-focused fieldset\": {\r\n            borderColor: \"white\",\r\n          },\r\n        },\r\n      },\r\n    })(TextField);\r\n  }\r\n  const useStyles = makeStyles({\r\n    input: {\r\n      color: inputColor,\r\n    },\r\n    lable: {\r\n      color: inputColor,\r\n    },\r\n    text: {\r\n      color: inputColor,\r\n    },\r\n    button: {\r\n      width: \"200px\",\r\n      marginTop: \"40px\",\r\n    },\r\n    picker: {\r\n      width: \"200px\",\r\n      marginBottom: \"40px\",\r\n    },\r\n    card: {\r\n      margin: \"20px 20px 20px 0px\",\r\n    },\r\n  });\r\n  const classes = useStyles();\r\n  const startCountDown = () => {\r\n    try {\r\n      let now = new Date();\r\n      let currentTime = now.getTime();\r\n      let eventTime = selectedDate.getTime();\r\n      let remainTime = eventTime - currentTime;\r\n      let s = Math.floor(remainTime / 1000);\r\n      let m = Math.floor(s / 60);\r\n      let h = Math.floor(m / 60);\r\n      let d = Math.floor(h / 24);\r\n      h %= 24;\r\n      m %= 60;\r\n      s %= 60;\r\n      h = h < 10 ? \"0\" + h : h;\r\n      m = m < 10 ? \"0\" + m : m;\r\n      s = s < 10 ? \"0\" + s : s;\r\n      document.getElementById(\"days\").innerText = d;\r\n      document.getElementById(\"hours\").innerText = h;\r\n      document.getElementById(\"min\").innerText = m;\r\n      document.getElementById(\"sec\").innerText = s;\r\n      setInterval(startCountDown, 1000);\r\n    } catch {}\r\n  };\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col\">\r\n        <div className=\"main-countdown\">\r\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n            <h4>Add Event</h4>\r\n            <KeyboardDatePicker\r\n              className={classes.picker}\r\n              disableToolbar\r\n              variant=\"inline\"\r\n              margin=\"normal\"\r\n              id=\"date-picker-inline\"\r\n              format=\"dd/MM/yyyy\"\r\n              value={selectedDate}\r\n              onChange={handleDateChange}\r\n              label=\"Choose end day\"\r\n              KeyboardButtonProps={{\r\n                \"aria-label\": \"change date\",\r\n              }}\r\n            />\r\n          </MuiPickersUtilsProvider>\r\n          <CustomTextField\r\n            id=\"task-content\"\r\n            variant=\"outlined\"\r\n            label=\"Event name\"\r\n            InputProps={{\r\n              className: classes.input,\r\n            }}\r\n            InputLabelProps={{\r\n              className: classes.lable,\r\n            }}\r\n          ></CustomTextField>\r\n          <Button\r\n            className={classes.button}\r\n            onClick={startCountDown}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n          >\r\n            START COUNT DOWN\r\n          </Button>\r\n          <div className=\"countdown-area\">\r\n            <p id=\"days\"></p>\r\n            <p id=\"hours\"></p>\r\n            <p id=\"min\"></p>\r\n            <p id=\"sec\"></p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"col\">\r\n        <h4>All Events</h4>\r\n        <div>\r\n          <Card className={classes.card}>\r\n            <CardContent>\r\n              <p>Test</p>\r\n            </CardContent>\r\n          </Card>\r\n          <Card className={classes.card}>\r\n            <CardContent>\r\n              <p>Test</p>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default CountDown;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"../css/body.css\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport SideBar from \"./sideBar\";\r\nimport TaskBoard from \"./taskBoard\";\r\nimport CountDown from \"./countDown\";\r\n\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport { SettingsInputAntennaTwoTone } from \"@material-ui/icons\";\r\nfunction Body(props) {\r\n  const [tabRole, setTabRole] = useState(\"taskboard\");\r\n  useEffect(() => {\r\n    if (props.darkMode) {\r\n      document.getElementById(\"body\").style.backgroundColor = \"#202020\";\r\n    } else {\r\n      document.getElementById(\"body\").style.backgroundColor = \"white\";\r\n    }\r\n  });\r\n\r\n  const handleStateChange = index => {\r\n    if (index === 0) {\r\n      setTabRole(\"taskboard\");\r\n    } else if (index === 1) {\r\n      setTabRole(\"upcoming\");\r\n    } else {\r\n      setTabRole(\"countdown\");\r\n    }\r\n  };\r\n  return (\r\n    <div id=\"body\" className=\"main-body\">\r\n      <div className=\"row\">\r\n        <div className=\"col side-bar\">\r\n          <SideBar onChange={handleStateChange} darkMode={props.darkMode}></SideBar>\r\n        </div>\r\n        <div className=\"col-9\">\r\n          {tabRole === \"taskboard\" ? (\r\n            <TaskBoard darkMode={props.darkMode}></TaskBoard>\r\n          ) : (\r\n            <CountDown darkMode={props.darkMode}></CountDown>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Body;\r\n","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"./components/navBar\";\nimport NavBar from \"./components/navBar\";\nimport Body from \"./components/body\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  const [darkMode, setDarkMode] = useState(false);\n  const darkModeChange = () => {\n    setDarkMode(!darkMode);\n  };\n  return (\n    <div className=\"App\">\n      <NavBar onChange={darkModeChange}></NavBar>\n      <Body darkMode={darkMode}></Body>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}